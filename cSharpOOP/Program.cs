using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace cSharpOOP
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Задание 1.");
            Console.WriteLine(" * Для реализованного класса создать новый класс Creator, " +
                "который будет являться фабрикой объектов класса здания. Для этого изменить " +
                "модификатор доступа к конструкторам класса, в новый созданный класс " +
                "добавить перегруженные фабричные методы CreateBuild для создания объектов " +
                "класса здания. В классе Creator все методы сделать статическими, конструктор " +
                "класса сделать закрытым. Для хранения объектов класса здания в классе Creator " +
                "использовать хеш-таблицу. Предусмотреть возможность удаления объекта здания по " +
                "его уникальному номеру из хеш-таблицы. Создать тестовый пример, работающий с " +
                "созданными классами.\n");
            var b1 = new Building(30.5, 9, 108, 3);
            Console.WriteLine(b1);
            Console.WriteLine("Высота этажа: " + Math.Round(b1.GetFloorHeight(),2) + " м.");
            Console.WriteLine("Квартир в подъезде: " + b1.GetFlatsPerEntrance());
            Console.WriteLine("Квартир на этаже: " + b1.GetFlatsPerFloor());

            Console.WriteLine("- - - - - - - - - - - - - - - - - - - - - - - - ");
            
            Console.WriteLine("Задание 2.");
            Console.WriteLine("* Для реализованного класса создать новый класс Creator, который " +
                "будет являться фабрикой объектов класса здания. Для этого изменить модификатор " +
                "доступа к конструкторам класса, в новый созданный класс добавить перегруженные " +
                "фабричные методы CreateBuild для создания объектов класса здания. В классе Creator " +
                "все методы сделать статическими, конструктор класса сделать закрытым. Для хранения " +
                "объектов класса здания в классе Creator использовать хеш-таблицу. Предусмотреть " +
                "возможность удаления объекта здания по его уникальному номеру из хеш-таблицы. " +
                "Создать тестовый пример, работающий с созданными классами.\n");
            var b2 = Creator.CreateBuildingEmpty();
            Console.WriteLine(b2 + "\n");
            var b3 = Creator.CreateBuildingFlatsOnly(10);
            Console.WriteLine(b3 + "\n");

        }


    }
}
